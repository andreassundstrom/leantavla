@inject HttpClient client
@page "/konfiguration/attributtyper"
<h3>Konfiguration av attributtyper</h3>
<div class="row">
    <div class="col-md-4"><RadzenLabel Text="Namn"></RadzenLabel></div>
    <div class="col-md-8"><RadzenTextBox @bind-Value="@NyAttributtyp.Attributnamn"></RadzenTextBox></div>
</div>
<div class="row mt-3">
    <div class="col-md-4"><RadzenLabel Text="Beskrivning"></RadzenLabel></div>
    <div class="col-md-8"><RadzenTextBox @bind-Value="@NyAttributtyp.Attributbeskrivning"></RadzenTextBox></div>
</div>
<div class="row mt-3">
    <div class="col-md-4"><RadzenLabel Text="Datatyp"></RadzenLabel></div>
    <div class="col-md-8">
        @if (!loading)
        {
            <RadzenDropDown Data="@Datatyper"
                            TValue=@(string)
                            Change=@((args) => NyAttributtyp.Datatyp = Enum.Parse<Datatyp>(args.ToString()))></RadzenDropDown>
        }

    </div>
</div>
<div class="row mt-3">
    <RadzenButton Disabled=@(loading) Click="SparaAttributtyp" Text="Spara"></RadzenButton>
</div>
@if(showResult == true)
{
    <div class="row mt-3">
        <div class="alert col @this.resultClass">
            <p>@message</p>
        </div>
    </div>
}

@code {
    Attributtyp NyAttributtyp { get; set; }
    bool loading { get; set; } = false;
    IEnumerable<string> Datatyper = Enum.GetNames(typeof(Datatyp)).Cast<string>();

    bool showResult = false;
    string resultClass = "";
    string message = "";

    protected override async Task OnInitializedAsync()
    {
        NyAttributtyp = new Attributtyp();
    }
    public async Task SparaAttributtyp()
    {
        loading = true;
        var response = await client.PostAsJsonAsync<Attributtyp>("api/attributtyp",NyAttributtyp);

        if (response.IsSuccessStatusCode)
        {
            NyAttributtyp = new Attributtyp();

            loading = false;
            resultClass = "alert-success";
            message = "Attributtypen skapad!";
            showResult = true;
            StateHasChanged();
            await Task.Delay(10000);
            showResult = false;

            StateHasChanged();
        }
    }
}
