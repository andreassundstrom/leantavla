@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient client
@inject AppState appState 
@inject NavigationManager NavigationManager
@page "/lappar/{BrädaId}"
@using Leantavla.Client
@using Leantavla.Client.Components
@using System.Collections.ObjectModel
<style>
    * {
        box-sizing: border-box;
    }

    .column {
        float: left !important;
        width: @columnWidth;
        padding: 10px !important;
        height: 80vh !important;
        margin: 5px !important;
        border-radius: 4px;
        background-color: #bae7ff;
    }

    .targetcolumn {
        float: left !important;
        width: @columnWidth;
        padding: 10px !important;
        height: 80vh !important;
        margin: 5px !important;
        background-color: #bae7ff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }
</style>
<h1>@bräda?.BrädaNamn</h1>
@if (columnWidth is not null)
{
    @foreach (Status status in Statusar)
    {
        Console.WriteLine(status);
        <DropTarget T="Lapp" Drop="@( async e => await OnDrop(e, status) )">
            <div class=@SetColumnClass(context)>

                <h2>@status.StatusNamn</h2>

                @foreach (Lapp lapp in Lappar.Where(e => e.StatusId == status.StatusId))
                {
                    
                    <Draggable Data="lapp">
                        <LappComponent Lapp="lapp"></LappComponent>
                    </Draggable>
                }

            </div>
        </DropTarget>
    }
}


@code {
    string divClass = "column";
    bool isDragging { get; set; }
    string columnWidth { get; set; }

    [Parameter] public string BrädaId { get; set; }
    private int _brädaId { get; set; }
    public Bräda bräda { get; set; }
    public List<Lapp> Lappar { get; set; }
    List<Status> Statusar { get; set; }
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _brädaId = Int32.Parse(BrädaId);
        appState.ActiveBoardId = _brädaId;
        bräda = await client.GetFromJsonAsync<Bräda>($"api/bräda/{_brädaId}");
        await GetLappar();
        Statusar = await client.GetFromJsonAsync<List<Status>>($"api/attributtyp/status?BrädaId={_brädaId}");
        GetColumnWidth();

        hubConnection = new HubConnectionBuilder()
     .WithUrl(NavigationManager.ToAbsoluteUri("/lapphub"))
     .Build();

        hubConnection.On<Lapp>("HämtaLapp", (synclapp) =>
        {
            var gammalLapp = Lappar.FirstOrDefault(e => e.LappId == synclapp.LappId);

            if (gammalLapp is null)
            {
                Lappar.Add(synclapp);
                StateHasChanged();

            }
            else
            {
                Lappar.Remove(Lappar.Single(p => p.LappId == synclapp.LappId));
                Lappar.Add(synclapp);
                StateHasChanged();

            }
        });

        await hubConnection.StartAsync();
    }

    private async Task GetLappar()
    {
        Lappar = await client.GetFromJsonAsync<List<Lapp>>($"api/lapp?BrädaId={_brädaId}");
    }

    private void GetColumnWidth()
    {
        int result = 95 / Statusar.Count();

        columnWidth = $"{result}%";
    }

    private async Task OnDrop(Lapp data, Status status)
    {
        var lapp = Lappar.FirstOrDefault(e => e.LappId == data.LappId);
        if (lapp is not null)
        {
            lapp.StatusId = status.StatusId;
            await client.PutAsJsonAsync<Lapp>("api/lapp", lapp);

            await hubConnection.SendAsync("SkickaLapp", lapp);

        }

        isDragging = false;
        Console.WriteLine(isDragging);
        StateHasChanged();

    }

    string SetColumnClass(string context)
    {
        @if (context == "False" && isDragging)
        {
            divClass = "targetcolumn";
            return divClass;
        }
        else if (context == "False" && !isDragging)
        {
            divClass = "column";
            isDragging = false;
            return divClass;
        }
        else if (context == "True" && isDragging)
        {
            divClass = "column";
            return divClass;
        }
        else if (context == "True" && !isDragging)
        {
            isDragging = true;
            divClass = "column";
            StateHasChanged();
            return divClass;
        }
        return divClass;
    }

}
